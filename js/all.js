// Generated by CoffeeScript 1.6.3
(function() {
  var Spiral, Tree, factor, linelength, linespacing, period, rate, thetamax, thetamin, tree, xscreenoffset, xscreenscale, ycamera, yscreenoffset, yscreenscale, zcamera,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  thetamin = 0;

  thetamax = 6 * Math.PI;

  period = 5;

  linespacing = 1 / 30;

  linelength = linespacing / 2;

  yscreenoffset = 300;

  xscreenoffset = 260;

  xscreenscale = 360;

  yscreenscale = 360;

  ycamera = 2;

  zcamera = -3;

  rate = 1 / (2 * Math.PI);

  factor = rate / 3;

  Spiral = (function() {
    var computeLineSegments, getPointByAngle, getdtheta, projectTo2d, stroke;

    function Spiral(foreground, angleoffset, factor, config) {
      this.foreground = foreground;
      this.angleoffset = angleoffset;
      this.factor = factor;
      if (config == null) {
        config = {};
      }
      this.period = config.period || period;
      this.spacing = config.spacing || linespacing;
      this.rate = config.rate || rate;
      this.offset = 0;
      this.linelength = config.linelength || linelength;
      this.lineSegments = computeLineSegments(this);
    }

    Spiral.prototype.render = function(ctx) {
      var lineSegment, _i, _len, _ref, _results;
      this.offset -= 1;
      if (this.offset <= -this.period) {
        this.offset += this.period;
      }
      _ref = this.lineSegments[this.offset];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lineSegment = _ref[_i];
        _results.push(this.drawLineSegment(ctx, lineSegment));
      }
      return _results;
    };

    Spiral.prototype.drawLineSegment = function(ctx, segment) {
      stroke(ctx, this.foreground, segment.start.alpha);
      ctx.moveTo(segment.start.x, segment.start.y);
      return ctx.lineTo(segment.end.x, segment.end.y);
    };

    stroke = function(ctx, color, alpha) {
      ctx.closePath();
      ctx.stroke();
      ctx.strokeStyle = color;
      ctx.globalAlpha = alpha;
      return ctx.beginPath();
    };

    computeLineSegments = function(s) {
      var inc, lineSegments, lines, offset, theta, thetanew, thetaold;
      lineSegments = {};
      offset = 0;
      while (offset > -s.period) {
        lineSegments[offset] = lines = [];
        theta = thetamin + getdtheta(thetamin, offset * s.spacing / s.period, s.rate, s.factor);
        while (theta < thetamax) {
          inc = getdtheta(theta, linespacing, rate, factor);
          thetaold = theta >= thetamin ? theta : thetamin;
          thetanew = theta + getdtheta(theta, linelength, rate, factor);
          theta += inc;
          if (thetanew <= thetamin) {
            continue;
          }
          lines.push({
            start: getPointByAngle(thetaold, s.factor, s.angleoffset, s.rate),
            end: getPointByAngle(thetanew, s.factor, s.angleoffset, s.rate)
          });
        }
        offset--;
      }
      return lineSegments;
    };

    getPointByAngle = function(theta, factor, offset, rate) {
      var point, x, y, z;
      x = theta * factor * Math.cos(theta + offset);
      y = rate * theta;
      z = -theta * factor * Math.sin(theta + offset);
      point = projectTo2d(x, y, z);
      point.alpha = Math.atan((y * factor / rate * 0.1 + 0.02 - z) * 40) * 0.35 + 0.65;
      return point;
    };

    projectTo2d = function(x, y, z) {
      return {
        x: xscreenoffset + xscreenscale * (x / (z - zcamera)),
        y: yscreenoffset + yscreenscale * ((y - ycamera) / (z - zcamera))
      };
    };

    getdtheta = function(theta, lineLength, rate, factor) {
      return lineLength / Math.sqrt(rate * rate + factor * factor * theta * theta);
    };

    return Spiral;

  })();

  Tree = (function() {
    function Tree(elem, config) {
      this.render = __bind(this.render, this);
      this.elem = document.getElementById(elem);
      this.ctx = this.elem.getContext('2d');
      this.spirals = [new Spiral('#ff0000', Math.PI, factor), new Spiral('#660000', Math.PI * 0.95, factor * 0.93), new Spiral('#220000', Math.PI * 0.92, factor * 0.9), new Spiral('#00ffcc', 0, factor), new Spiral('#003322', -Math.PI * 0.05, factor * 0.93), new Spiral('#002211', -Math.PI * 0.08, factor * 0.9)];
    }

    Tree.prototype.run = function() {
      return this.render();
    };

    Tree.prototype.render = function() {
      this.requestAnimationFrame();
      return this.renderFrame();
    };

    Tree.prototype.renderFrame = function() {
      var spiral, _i, _len, _ref, _results;
      this.ctx.clearRect(0, 0, 500, 500);
      this.ctx.beginPath();
      _ref = this.spirals;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        spiral = _ref[_i];
        _results.push(spiral.render(this.ctx));
      }
      return _results;
    };

    Tree.prototype.requestAnimationFrame = function() {
      return window.setTimeout(this.render, 1000 / 24);
    };

    return Tree;

  })();

  tree = new Tree('scene', {});

  tree.run();

}).call(this);
